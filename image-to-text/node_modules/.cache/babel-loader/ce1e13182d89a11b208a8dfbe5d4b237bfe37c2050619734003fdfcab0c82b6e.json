{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst events = require('node:events');\nconst detectLibc = require('detect-libc');\nconst is = require('./is');\nconst {\n  runtimePlatformArch\n} = require('./libvips');\nconst sharp = require('./sharp');\nconst runtimePlatform = runtimePlatformArch();\nconst libvipsVersion = sharp.libvipsVersion();\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\nformat.heif.output.alias = ['avif', 'heic'];\nformat.jpeg.output.alias = ['jpe', 'jpg'];\nformat.tiff.output.alias = ['tif'];\nformat.jp2k.output.alias = ['j2c', 'j2k', 'jp2', 'jpx'];\n\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n  /** [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n  /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n\n/**\n * An Object containing the version numbers of sharp, libvips\n * and (when using prebuilt binaries) its dependencies.\n *\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: libvipsVersion.semver\n};\n/* istanbul ignore next */\nif (!libvipsVersion.isGlobal) {\n  if (!libvipsVersion.isWasm) {\n    try {\n      versions = require(`@img/sharp-${runtimePlatform}/versions`);\n    } catch (_) {\n      try {\n        versions = require(`@img/sharp-libvips-${runtimePlatform}/versions`);\n      } catch (_) {}\n    }\n  } else {\n    try {\n      versions = require('@img/sharp-wasm32/versions');\n    } catch (_) {}\n  }\n}\nversions.sharp = require('../package.json').version;\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache(options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the maximum number of threads _libvips_ should use to process _each image_.\n * These are from a thread pool managed by glib,\n * which helps avoid the overhead of creating new threads.\n *\n * This method always returns the current concurrency.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * Some image format libraries spawn additional threads,\n * e.g. libaom manages its own 4 threads when encoding AVIF images,\n * and these are independent of the value set here.\n *\n * The maximum number of images that sharp can process in parallel\n * is controlled by libuv's `UV_THREADPOOL_SIZE` environment variable,\n * which defaults to 4.\n *\n * https://nodejs.org/api/cli.html#uv_threadpool_sizesize\n *\n * For example, by default, a machine with 8 CPU cores will process\n * 4 images in parallel and use up to 8 threads per image,\n * so there will be up to 32 concurrent threads.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\nfunction concurrency(concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\nif (detectLibc.familySync() === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n} else if (detectLibc.familySync() === detectLibc.MUSL && sharp.concurrency() === 1024) {\n  // Reduce default concurrency when musl thread over-subscription detected\n  sharp.concurrency(require('node:os').availableParallelism());\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters() {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with highway support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of highway is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using highway at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\nfunction simd(simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\n\n/**\n * Block libvips operations at runtime.\n *\n * This is in addition to the `VIPS_BLOCK_UNTRUSTED` environment variable,\n * which when set will block all \"untrusted\" operations.\n *\n * @since 0.32.4\n *\n * @example <caption>Block all TIFF input.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoadTiff']\n * });\n *\n * @param {Object} options\n * @param {Array<string>} options.operation - List of libvips low-level operation names to block.\n */\nfunction block(options) {\n  if (is.object(options)) {\n    if (Array.isArray(options.operation) && options.operation.every(is.string)) {\n      sharp.block(options.operation, true);\n    } else {\n      throw is.invalidParameterError('operation', 'Array<string>', options.operation);\n    }\n  } else {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n}\n\n/**\n * Unblock libvips operations at runtime.\n *\n * This is useful for defining a list of allowed operations.\n *\n * @since 0.32.4\n *\n * @example <caption>Block all input except WebP from the filesystem.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoad']\n * });\n * sharp.unblock({\n *   operation: ['VipsForeignLoadWebpFile']\n * });\n *\n * @example <caption>Block all input except JPEG and PNG from a Buffer or Stream.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoad']\n * });\n * sharp.unblock({\n *   operation: ['VipsForeignLoadJpegBuffer', 'VipsForeignLoadPngBuffer']\n * });\n *\n * @param {Object} options\n * @param {Array<string>} options.operation - List of libvips low-level operation names to unblock.\n */\nfunction unblock(options) {\n  if (is.object(options)) {\n    if (Array.isArray(options.operation) && options.operation.every(is.string)) {\n      sharp.block(options.operation, false);\n    } else {\n      throw is.invalidParameterError('operation', 'Array<string>', options.operation);\n    }\n  } else {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n}\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n  Sharp.block = block;\n  Sharp.unblock = unblock;\n};","map":{"version":3,"names":["events","require","detectLibc","is","runtimePlatformArch","sharp","runtimePlatform","libvipsVersion","format","heif","output","alias","jpeg","tiff","jp2k","interpolators","nearest","bilinear","bicubic","locallyBoundedBicubic","nohalo","vertexSplitQuadraticBasisSpline","versions","vips","semver","isGlobal","isWasm","_","version","cache","options","bool","object","memory","files","items","concurrency","integer","familySync","GLIBC","_isUsingJemalloc","MUSL","availableParallelism","queue","EventEmitter","counters","simd","block","Array","isArray","operation","every","string","invalidParameterError","unblock","module","exports","Sharp"],"sources":["C:/Users/adria/OneDrive/Desktop/bill-splitting-and-receipt-archival/image-to-text/node_modules/sharp/lib/utility.js"],"sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst events = require('node:events');\nconst detectLibc = require('detect-libc');\n\nconst is = require('./is');\nconst { runtimePlatformArch } = require('./libvips');\nconst sharp = require('./sharp');\n\nconst runtimePlatform = runtimePlatformArch();\nconst libvipsVersion = sharp.libvipsVersion();\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\nformat.heif.output.alias = ['avif', 'heic'];\nformat.jpeg.output.alias = ['jpe', 'jpg'];\nformat.tiff.output.alias = ['tif'];\nformat.jp2k.output.alias = ['j2c', 'j2k', 'jp2', 'jpx'];\n\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n  /** [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n  /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n\n/**\n * An Object containing the version numbers of sharp, libvips\n * and (when using prebuilt binaries) its dependencies.\n *\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: libvipsVersion.semver\n};\n/* istanbul ignore next */\nif (!libvipsVersion.isGlobal) {\n  if (!libvipsVersion.isWasm) {\n    try {\n      versions = require(`@img/sharp-${runtimePlatform}/versions`);\n    } catch (_) {\n      try {\n        versions = require(`@img/sharp-libvips-${runtimePlatform}/versions`);\n      } catch (_) {}\n    }\n  } else {\n    try {\n      versions = require('@img/sharp-wasm32/versions');\n    } catch (_) {}\n  }\n}\nversions.sharp = require('../package.json').version;\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache (options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the maximum number of threads _libvips_ should use to process _each image_.\n * These are from a thread pool managed by glib,\n * which helps avoid the overhead of creating new threads.\n *\n * This method always returns the current concurrency.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * Some image format libraries spawn additional threads,\n * e.g. libaom manages its own 4 threads when encoding AVIF images,\n * and these are independent of the value set here.\n *\n * The maximum number of images that sharp can process in parallel\n * is controlled by libuv's `UV_THREADPOOL_SIZE` environment variable,\n * which defaults to 4.\n *\n * https://nodejs.org/api/cli.html#uv_threadpool_sizesize\n *\n * For example, by default, a machine with 8 CPU cores will process\n * 4 images in parallel and use up to 8 threads per image,\n * so there will be up to 32 concurrent threads.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\nfunction concurrency (concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\nif (detectLibc.familySync() === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n} else if (detectLibc.familySync() === detectLibc.MUSL && sharp.concurrency() === 1024) {\n  // Reduce default concurrency when musl thread over-subscription detected\n  sharp.concurrency(require('node:os').availableParallelism());\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters () {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with highway support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of highway is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using highway at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\nfunction simd (simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\n\n/**\n * Block libvips operations at runtime.\n *\n * This is in addition to the `VIPS_BLOCK_UNTRUSTED` environment variable,\n * which when set will block all \"untrusted\" operations.\n *\n * @since 0.32.4\n *\n * @example <caption>Block all TIFF input.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoadTiff']\n * });\n *\n * @param {Object} options\n * @param {Array<string>} options.operation - List of libvips low-level operation names to block.\n */\nfunction block (options) {\n  if (is.object(options)) {\n    if (Array.isArray(options.operation) && options.operation.every(is.string)) {\n      sharp.block(options.operation, true);\n    } else {\n      throw is.invalidParameterError('operation', 'Array<string>', options.operation);\n    }\n  } else {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n}\n\n/**\n * Unblock libvips operations at runtime.\n *\n * This is useful for defining a list of allowed operations.\n *\n * @since 0.32.4\n *\n * @example <caption>Block all input except WebP from the filesystem.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoad']\n * });\n * sharp.unblock({\n *   operation: ['VipsForeignLoadWebpFile']\n * });\n *\n * @example <caption>Block all input except JPEG and PNG from a Buffer or Stream.</caption>\n * sharp.block({\n *   operation: ['VipsForeignLoad']\n * });\n * sharp.unblock({\n *   operation: ['VipsForeignLoadJpegBuffer', 'VipsForeignLoadPngBuffer']\n * });\n *\n * @param {Object} options\n * @param {Array<string>} options.operation - List of libvips low-level operation names to unblock.\n */\nfunction unblock (options) {\n  if (is.object(options)) {\n    if (Array.isArray(options.operation) && options.operation.every(is.string)) {\n      sharp.block(options.operation, false);\n    } else {\n      throw is.invalidParameterError('operation', 'Array<string>', options.operation);\n    }\n  } else {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n}\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n  Sharp.block = block;\n  Sharp.unblock = unblock;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}