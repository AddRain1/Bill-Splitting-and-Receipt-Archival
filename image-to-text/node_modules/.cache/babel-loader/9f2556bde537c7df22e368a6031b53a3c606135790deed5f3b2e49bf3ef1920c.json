{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst {\n  spawnSync\n} = require('node:child_process');\nconst {\n  createHash\n} = require('node:crypto');\nconst semverCoerce = require('semver/functions/coerce');\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\nconst semverSatisfies = require('semver/functions/satisfies');\nconst detectLibc = require('detect-libc');\nconst {\n  engines,\n  optionalDependencies\n} = require('../package.json');\nconst minimumLibvipsVersionLabelled = process.env.npm_package_config_libvips || /* istanbul ignore next */\nengines.libvips;\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\nconst prebuiltPlatforms = ['darwin-arm64', 'darwin-x64', 'linux-arm', 'linux-arm64', 'linux-s390x', 'linux-x64', 'linuxmusl-arm64', 'linuxmusl-x64', 'win32-ia32', 'win32-x64'];\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\nconst log = item => {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\n/* istanbul ignore next */\nconst runtimeLibc = () => detectLibc.isNonGlibcLinuxSync() ? detectLibc.familySync() : '';\nconst runtimePlatformArch = () => `${process.platform}${runtimeLibc()}-${process.arch}`;\n\n/* istanbul ignore next */\nconst buildPlatformArch = () => {\n  if (isEmscripten()) {\n    return 'wasm32';\n  }\n  /* eslint camelcase: [\"error\", { allow: [\"^npm_config_\"] }] */\n  const {\n    npm_config_arch,\n    npm_config_platform,\n    npm_config_libc\n  } = process.env;\n  const libc = typeof npm_config_libc === 'string' ? npm_config_libc : runtimeLibc();\n  return `${npm_config_platform || process.platform}${libc}-${npm_config_arch || process.arch}`;\n};\nconst buildSharpLibvipsIncludeDir = () => {\n  try {\n    return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/include`);\n  } catch {\n    try {\n      return require('@img/sharp-libvips-dev/include');\n    } catch {}\n  }\n  /* istanbul ignore next */\n  return '';\n};\nconst buildSharpLibvipsCPlusPlusDir = () => {\n  try {\n    return require('@img/sharp-libvips-dev/cplusplus');\n  } catch {}\n  /* istanbul ignore next */\n  return '';\n};\nconst buildSharpLibvipsLibDir = () => {\n  try {\n    return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/lib`);\n  } catch {\n    try {\n      return require(`@img/sharp-libvips-${buildPlatformArch()}/lib`);\n    } catch {}\n  }\n  /* istanbul ignore next */\n  return '';\n};\nconst isUnsupportedNodeRuntime = () => {\n  /* istanbul ignore next */\n  if (process.release?.name === 'node' && process.versions) {\n    if (!semverSatisfies(process.versions.node, engines.node)) {\n      return {\n        found: process.versions.node,\n        expected: engines.node\n      };\n    }\n  }\n};\n\n/* istanbul ignore next */\nconst isEmscripten = () => {\n  const {\n    CC\n  } = process.env;\n  return Boolean(CC && CC.endsWith('/emcc'));\n};\nconst isRosetta = () => {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n  return false;\n};\nconst sha512 = s => createHash('sha512').update(s).digest('hex');\nconst yarnLocator = () => {\n  try {\n    const identHash = sha512(`imgsharp-libvips-${buildPlatformArch()}`);\n    const npmVersion = semverCoerce(optionalDependencies[`@img/sharp-libvips-${buildPlatformArch()}`]).version;\n    return sha512(`${identHash}npm:${npmVersion}`).slice(0, 10);\n  } catch {}\n  return '';\n};\n\n/* istanbul ignore next */\nconst spawnRebuild = () => spawnSync(`node-gyp rebuild --directory=src ${isEmscripten() ? '--nodedir=emscripten' : ''}`, {\n  ...spawnSyncOptions,\n  stdio: 'inherit'\n}).status;\nconst globalLibvipsVersion = () => {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync('pkg-config --modversion vips-cpp', {\n      ...spawnSyncOptions,\n      env: {\n        ...process.env,\n        PKG_CONFIG_PATH: pkgConfigPath()\n      }\n    }).stdout;\n    /* istanbul ignore next */\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\n/* istanbul ignore next */\nconst pkgConfigPath = () => {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && brew environment --plain | grep PKG_CONFIG_LIBDIR | cut -d\" \" -f2', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), process.env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig', '/usr/local/libdata/pkgconfig', '/usr/libdata/pkgconfig'].filter(Boolean).join(':');\n  } else {\n    return '';\n  }\n};\nconst skipSearch = (status, reason) => {\n  log(`Detected ${reason}, skipping search for globally-installed libvips`);\n  return status;\n};\nconst useGlobalLibvips = () => {\n  if (Boolean(process.env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return skipSearch(false, 'SHARP_IGNORE_GLOBAL_LIBVIPS');\n  }\n  if (Boolean(process.env.SHARP_FORCE_GLOBAL_LIBVIPS) === true) {\n    return skipSearch(true, 'SHARP_FORCE_GLOBAL_LIBVIPS');\n  }\n  /* istanbul ignore next */\n  if (isRosetta()) {\n    return skipSearch(false, 'Rosetta');\n  }\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion && /* istanbul ignore next */\n  semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\nmodule.exports = {\n  minimumLibvipsVersion,\n  prebuiltPlatforms,\n  buildPlatformArch,\n  buildSharpLibvipsIncludeDir,\n  buildSharpLibvipsCPlusPlusDir,\n  buildSharpLibvipsLibDir,\n  isUnsupportedNodeRuntime,\n  runtimePlatformArch,\n  log,\n  yarnLocator,\n  spawnRebuild,\n  globalLibvipsVersion,\n  pkgConfigPath,\n  useGlobalLibvips\n};","map":{"version":3,"names":["spawnSync","require","createHash","semverCoerce","semverGreaterThanOrEqualTo","semverSatisfies","detectLibc","engines","optionalDependencies","minimumLibvipsVersionLabelled","process","env","npm_package_config_libvips","libvips","minimumLibvipsVersion","version","prebuiltPlatforms","spawnSyncOptions","encoding","shell","log","item","Error","console","error","message","runtimeLibc","isNonGlibcLinuxSync","familySync","runtimePlatformArch","platform","arch","buildPlatformArch","isEmscripten","npm_config_arch","npm_config_platform","npm_config_libc","libc","buildSharpLibvipsIncludeDir","buildSharpLibvipsCPlusPlusDir","buildSharpLibvipsLibDir","isUnsupportedNodeRuntime","release","name","versions","node","found","expected","CC","Boolean","endsWith","isRosetta","translated","stdout","trim","sha512","s","update","digest","yarnLocator","identHash","npmVersion","slice","spawnRebuild","stdio","status","globalLibvipsVersion","PKG_CONFIG_PATH","pkgConfigPath","brewPkgConfigPath","filter","join","skipSearch","reason","useGlobalLibvips","SHARP_IGNORE_GLOBAL_LIBVIPS","SHARP_FORCE_GLOBAL_LIBVIPS","globalVipsVersion","module","exports"],"sources":["C:/Users/adria/OneDrive/Desktop/bill-splitting-and-receipt-archival/image-to-text/node_modules/sharp/lib/libvips.js"],"sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst { spawnSync } = require('node:child_process');\nconst { createHash } = require('node:crypto');\nconst semverCoerce = require('semver/functions/coerce');\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\nconst semverSatisfies = require('semver/functions/satisfies');\nconst detectLibc = require('detect-libc');\n\nconst { engines, optionalDependencies } = require('../package.json');\n\nconst minimumLibvipsVersionLabelled = process.env.npm_package_config_libvips || /* istanbul ignore next */\n  engines.libvips;\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\n\nconst prebuiltPlatforms = [\n  'darwin-arm64', 'darwin-x64',\n  'linux-arm', 'linux-arm64', 'linux-s390x', 'linux-x64',\n  'linuxmusl-arm64', 'linuxmusl-x64',\n  'win32-ia32', 'win32-x64'\n];\n\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst log = (item) => {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\n/* istanbul ignore next */\nconst runtimeLibc = () => detectLibc.isNonGlibcLinuxSync() ? detectLibc.familySync() : '';\n\nconst runtimePlatformArch = () => `${process.platform}${runtimeLibc()}-${process.arch}`;\n\n/* istanbul ignore next */\nconst buildPlatformArch = () => {\n  if (isEmscripten()) {\n    return 'wasm32';\n  }\n  /* eslint camelcase: [\"error\", { allow: [\"^npm_config_\"] }] */\n  const { npm_config_arch, npm_config_platform, npm_config_libc } = process.env;\n  const libc = typeof npm_config_libc === 'string' ? npm_config_libc : runtimeLibc();\n  return `${npm_config_platform || process.platform}${libc}-${npm_config_arch || process.arch}`;\n};\n\nconst buildSharpLibvipsIncludeDir = () => {\n  try {\n    return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/include`);\n  } catch {\n    try {\n      return require('@img/sharp-libvips-dev/include');\n    } catch {}\n  }\n  /* istanbul ignore next */\n  return '';\n};\n\nconst buildSharpLibvipsCPlusPlusDir = () => {\n  try {\n    return require('@img/sharp-libvips-dev/cplusplus');\n  } catch {}\n  /* istanbul ignore next */\n  return '';\n};\n\nconst buildSharpLibvipsLibDir = () => {\n  try {\n    return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/lib`);\n  } catch {\n    try {\n      return require(`@img/sharp-libvips-${buildPlatformArch()}/lib`);\n    } catch {}\n  }\n  /* istanbul ignore next */\n  return '';\n};\n\nconst isUnsupportedNodeRuntime = () => {\n  /* istanbul ignore next */\n  if (process.release?.name === 'node' && process.versions) {\n    if (!semverSatisfies(process.versions.node, engines.node)) {\n      return { found: process.versions.node, expected: engines.node };\n    }\n  }\n};\n\n/* istanbul ignore next */\nconst isEmscripten = () => {\n  const { CC } = process.env;\n  return Boolean(CC && CC.endsWith('/emcc'));\n};\n\nconst isRosetta = () => {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n  return false;\n};\n\nconst sha512 = (s) => createHash('sha512').update(s).digest('hex');\n\nconst yarnLocator = () => {\n  try {\n    const identHash = sha512(`imgsharp-libvips-${buildPlatformArch()}`);\n    const npmVersion = semverCoerce(optionalDependencies[`@img/sharp-libvips-${buildPlatformArch()}`]).version;\n    return sha512(`${identHash}npm:${npmVersion}`).slice(0, 10);\n  } catch {}\n  return '';\n};\n\n/* istanbul ignore next */\nconst spawnRebuild = () =>\n  spawnSync(`node-gyp rebuild --directory=src ${isEmscripten() ? '--nodedir=emscripten' : ''}`, {\n    ...spawnSyncOptions,\n    stdio: 'inherit'\n  }).status;\n\nconst globalLibvipsVersion = () => {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync('pkg-config --modversion vips-cpp', {\n      ...spawnSyncOptions,\n      env: {\n        ...process.env,\n        PKG_CONFIG_PATH: pkgConfigPath()\n      }\n    }).stdout;\n    /* istanbul ignore next */\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\n/* istanbul ignore next */\nconst pkgConfigPath = () => {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync(\n      'which brew >/dev/null 2>&1 && brew environment --plain | grep PKG_CONFIG_LIBDIR | cut -d\" \" -f2',\n      spawnSyncOptions\n    ).stdout || '';\n    return [\n      brewPkgConfigPath.trim(),\n      process.env.PKG_CONFIG_PATH,\n      '/usr/local/lib/pkgconfig',\n      '/usr/lib/pkgconfig',\n      '/usr/local/libdata/pkgconfig',\n      '/usr/libdata/pkgconfig'\n    ].filter(Boolean).join(':');\n  } else {\n    return '';\n  }\n};\n\nconst skipSearch = (status, reason) => {\n  log(`Detected ${reason}, skipping search for globally-installed libvips`);\n  return status;\n};\n\nconst useGlobalLibvips = () => {\n  if (Boolean(process.env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return skipSearch(false, 'SHARP_IGNORE_GLOBAL_LIBVIPS');\n  }\n  if (Boolean(process.env.SHARP_FORCE_GLOBAL_LIBVIPS) === true) {\n    return skipSearch(true, 'SHARP_FORCE_GLOBAL_LIBVIPS');\n  }\n  /* istanbul ignore next */\n  if (isRosetta()) {\n    return skipSearch(false, 'Rosetta');\n  }\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion && /* istanbul ignore next */\n    semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion,\n  prebuiltPlatforms,\n  buildPlatformArch,\n  buildSharpLibvipsIncludeDir,\n  buildSharpLibvipsCPlusPlusDir,\n  buildSharpLibvipsLibDir,\n  isUnsupportedNodeRuntime,\n  runtimePlatformArch,\n  log,\n  yarnLocator,\n  spawnRebuild,\n  globalLibvipsVersion,\n  pkgConfigPath,\n  useGlobalLibvips\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}