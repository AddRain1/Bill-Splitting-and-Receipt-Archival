{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst is = require('./is');\n\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n\n/**\n * How to extend the image.\n * @member\n * @private\n */\nconst extendWith = {\n  background: 'background',\n  copy: 'copy',\n  repeat: 'repeat',\n  mirror: 'mirror'\n};\n\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n\n/**\n * Reduction kernels.\n * @member\n * @private\n */\nconst kernel = {\n  nearest: 'nearest',\n  linear: 'linear',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n\n/**\n * @private\n */\nfunction isRotationExpected(options) {\n  return options.angle % 360 !== 0 || options.useExifOrientation === true || options.rotationAngle !== 0;\n}\n\n/**\n * @private\n */\nfunction isResizeExpected(options) {\n  return options.width !== -1 || options.height !== -1;\n}\n\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: (default) Preserving aspect ratio, attempt to ensure the image covers both provided dimensions by cropping/clipping to fit.\n * - `contain`: Preserving aspect ratio, contain within both provided dimensions using \"letterboxing\" where necessary.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n *\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * <img alt=\"Examples of various values for the fit property when resizing\" width=\"100%\" style=\"aspect-ratio: 998/243\" src=\"https://cdn.jsdelivr.net/gh/lovell/sharp@main/docs/image/api-resize-fit.svg\">\n *\n * When using a **fit** of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n *\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The strategy-based approach initially resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible downsizing kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `linear`: Use a [triangle filter](https://en.wikipedia.org/wiki/Triangular_function).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * When upsampling, these kernels map to `nearest`, `linear` and `cubic` interpolators.\n * Downsampling kernels without a matching upsampling interpolator map to `cubic`.\n *\n * Only one resize can occur per pipeline.\n * Previous calls to `resize` in the same pipeline will be ignored.\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.outside,\n *     withoutReduction: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // of at least 200 pixels wide and 200 pixels high while maintaining aspect ratio\n *     // and no smaller than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {number} [width] - How many pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {number} [height] - How many pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {number} [options.width] - An alternative means of specifying `width`. If both are present this takes priority.\n * @param {number} [options.height] - An alternative means of specifying `height`. If both are present this takes priority.\n * @param {String} [options.fit='cover'] - How the image should be resized/cropped to fit the target dimension(s), one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - A position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when `fit` is `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - The kernel to use for image reduction and the inferred interpolator to use for upsampling. Use the `fastShrinkOnLoad` option to control kernel vs shrink-on-load.\n * @param {Boolean} [options.withoutEnlargement=false] - Do not scale up if the width *or* height are already less than the target dimensions, equivalent to GraphicsMagick's `>` geometry option. This may result in output dimensions smaller than the target dimensions.\n * @param {Boolean} [options.withoutReduction=false] - Do not scale down if the width *or* height are already greater than the target dimensions, equivalent to GraphicsMagick's `<` geometry option. This may still result in a crop to reach the target dimensions.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - Take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern or round-down of an auto-scaled dimension.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction resize(widthOrOptions, height, options) {\n  if (isResizeExpected(this.options)) {\n    this.options.debuglog('ignoring previous resize options');\n  }\n  if (this.options.widthPost !== -1) {\n    this.options.debuglog('operation order will be: extract, resize, extract');\n  }\n  if (is.defined(widthOrOptions)) {\n    if (is.object(widthOrOptions) && !is.defined(options)) {\n      options = widthOrOptions;\n    } else if (is.integer(widthOrOptions) && widthOrOptions > 0) {\n      this.options.width = widthOrOptions;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', widthOrOptions);\n    }\n  } else {\n    this.options.width = -1;\n  }\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    }\n    // Height\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    }\n    // Fit\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    }\n    // Position\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position) ? options.position : strategy[options.position] || position[options.position] || gravity[options.position];\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    }\n    // Background\n    this._setBackgroundColourOption('resizeBackground', options.background);\n    // Kernel\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    }\n    // Without enlargement\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    }\n    // Without reduction\n    if (is.defined(options.withoutReduction)) {\n      this._setBooleanOption('withoutReduction', options.withoutReduction);\n    }\n    // Shrink on load\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n  if (isRotationExpected(this.options) && isResizeExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Extend / pad / extrude one or more edges of the image with either\n * the provided background colour or pixels derived from the image.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n* @example\n * // Add a row of 10 red pixels to the bottom\n * sharp(input)\n *   .extend({\n *     bottom: 10,\n *     background: 'red'\n *   })\n *   ...\n *\n * @example\n * // Extrude image by 8 pixels to the right, mirroring existing right hand edge\n * sharp(input)\n *   .extend({\n *     right: 8,\n *     background: 'mirror'\n *   })\n *   ...\n *\n * @param {(number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {number} [extend.top=0]\n * @param {number} [extend.left=0]\n * @param {number} [extend.bottom=0]\n * @param {number} [extend.right=0]\n * @param {String} [extend.extendWith='background'] - populate new pixels using this method, one of: background, copy, repeat, mirror.\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\nfunction extend(extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (is.object(extend)) {\n    if (is.defined(extend.top)) {\n      if (is.integer(extend.top) && extend.top >= 0) {\n        this.options.extendTop = extend.top;\n      } else {\n        throw is.invalidParameterError('top', 'positive integer', extend.top);\n      }\n    }\n    if (is.defined(extend.bottom)) {\n      if (is.integer(extend.bottom) && extend.bottom >= 0) {\n        this.options.extendBottom = extend.bottom;\n      } else {\n        throw is.invalidParameterError('bottom', 'positive integer', extend.bottom);\n      }\n    }\n    if (is.defined(extend.left)) {\n      if (is.integer(extend.left) && extend.left >= 0) {\n        this.options.extendLeft = extend.left;\n      } else {\n        throw is.invalidParameterError('left', 'positive integer', extend.left);\n      }\n    }\n    if (is.defined(extend.right)) {\n      if (is.integer(extend.right) && extend.right >= 0) {\n        this.options.extendRight = extend.right;\n      } else {\n        throw is.invalidParameterError('right', 'positive integer', extend.right);\n      }\n    }\n    this._setBackgroundColourOption('extendBackground', extend.background);\n    if (is.defined(extend.extendWith)) {\n      if (is.string(extendWith[extend.extendWith])) {\n        this.options.extendWith = extendWith[extend.extendWith];\n      } else {\n        throw is.invalidParameterError('extendWith', 'one of: background, copy, repeat, mirror', extend.extendWith);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n  return this;\n}\n\n/**\n * Extract/crop a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` twice and `resize` once for extract-then-resize-then-extract in a fixed operation order.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {number} options.left - zero-indexed offset from left edge\n * @param {number} options.top - zero-indexed offset from top edge\n * @param {number} options.width - width of region to extract\n * @param {number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction extract(options) {\n  const suffix = isResizeExpected(this.options) || this.options.widthPre !== -1 ? 'Post' : 'Pre';\n  if (this.options[`width${suffix}`] !== -1) {\n    this.options.debuglog('ignoring previous extract options');\n  }\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this);\n  // Ensure existing rotation occurs before pre-resize extraction\n  if (isRotationExpected(this.options) && !isResizeExpected(this.options)) {\n    if (this.options.widthPre === -1 || this.options.widthPost === -1) {\n      this.options.rotateBeforePreExtract = true;\n    }\n  }\n  return this;\n}\n\n/**\n * Trim pixels from all edges that contain values similar to the given background colour, which defaults to that of the top-left pixel.\n *\n * Images with an alpha channel will use the combined bounding box of alpha and non-alpha channels.\n *\n * If the result of this operation would trim an image to nothing then no change is made.\n *\n * The `info` response Object will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @example\n * // Trim pixels with a colour similar to that of the top-left pixel.\n * await sharp(input)\n *   .trim()\n *   .toFile(output);\n *\n * @example\n * // Trim pixels with the exact same colour as that of the top-left pixel.\n * await sharp(input)\n *   .trim({\n *     threshold: 0\n *   })\n *   .toFile(output);\n *\n * @example\n * // Assume input is line art and trim only pixels with a similar colour to red.\n * const output = await sharp(input)\n *   .trim({\n *     background: \"#FF0000\",\n *     lineArt: true\n *   })\n *   .toBuffer();\n *\n * @example\n * // Trim all \"yellow-ish\" pixels, being more lenient with the higher threshold.\n * const output = await sharp(input)\n *   .trim({\n *     background: \"yellow\",\n *     threshold: 42,\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {string|Object} [options.background='top-left pixel'] - Background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to that of the top-left pixel.\n * @param {number} [options.threshold=10] - Allowed difference from the above colour, a positive number.\n * @param {boolean} [options.lineArt=false] - Does the input more closely resemble line art (e.g. vector) rather than being photographic?\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction trim(options) {\n  this.options.trimThreshold = 10;\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      if (is.defined(options.background)) {\n        this._setBackgroundColourOption('trimBackground', options.background);\n      }\n      if (is.defined(options.threshold)) {\n        if (is.number(options.threshold) && options.threshold >= 0) {\n          this.options.trimThreshold = options.threshold;\n        } else {\n          throw is.invalidParameterError('threshold', 'positive number', options.threshold);\n        }\n      }\n      if (is.defined(options.lineArt)) {\n        this._setBooleanOption('trimLineArt', options.lineArt);\n      }\n    } else {\n      throw is.invalidParameterError('trim', 'object', options);\n    }\n  }\n  if (isRotationExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  });\n  // Class attributes\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};","map":{"version":3,"names":["is","require","gravity","center","centre","north","east","south","west","northeast","southeast","southwest","northwest","position","top","right","bottom","left","extendWith","background","copy","repeat","mirror","strategy","entropy","attention","kernel","nearest","linear","cubic","mitchell","lanczos2","lanczos3","fit","contain","cover","fill","inside","outside","mapFitToCanvas","isRotationExpected","options","angle","useExifOrientation","rotationAngle","isResizeExpected","width","height","resize","widthOrOptions","debuglog","widthPost","defined","object","integer","invalidParameterError","canvas","string","pos","inRange","_setBackgroundColourOption","withoutEnlargement","_setBooleanOption","withoutReduction","fastShrinkOnLoad","rotateBeforePreExtract","extend","extendTop","extendBottom","extendLeft","extendRight","extract","suffix","widthPre","forEach","name","value","trim","trimThreshold","threshold","number","lineArt","module","exports","Sharp","Object","assign","prototype"],"sources":["C:/Users/adria/OneDrive/Desktop/bill-splitting-and-receipt-archival/image-to-text/node_modules/sharp/lib/resize.js"],"sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst is = require('./is');\n\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n\n/**\n * How to extend the image.\n * @member\n * @private\n */\nconst extendWith = {\n  background: 'background',\n  copy: 'copy',\n  repeat: 'repeat',\n  mirror: 'mirror'\n};\n\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n\n/**\n * Reduction kernels.\n * @member\n * @private\n */\nconst kernel = {\n  nearest: 'nearest',\n  linear: 'linear',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n\n/**\n * @private\n */\nfunction isRotationExpected (options) {\n  return (options.angle % 360) !== 0 || options.useExifOrientation === true || options.rotationAngle !== 0;\n}\n\n/**\n * @private\n */\nfunction isResizeExpected (options) {\n  return options.width !== -1 || options.height !== -1;\n}\n\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: (default) Preserving aspect ratio, attempt to ensure the image covers both provided dimensions by cropping/clipping to fit.\n * - `contain`: Preserving aspect ratio, contain within both provided dimensions using \"letterboxing\" where necessary.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n *\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * <img alt=\"Examples of various values for the fit property when resizing\" width=\"100%\" style=\"aspect-ratio: 998/243\" src=\"https://cdn.jsdelivr.net/gh/lovell/sharp@main/docs/image/api-resize-fit.svg\">\n *\n * When using a **fit** of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n *\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The strategy-based approach initially resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible downsizing kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `linear`: Use a [triangle filter](https://en.wikipedia.org/wiki/Triangular_function).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * When upsampling, these kernels map to `nearest`, `linear` and `cubic` interpolators.\n * Downsampling kernels without a matching upsampling interpolator map to `cubic`.\n *\n * Only one resize can occur per pipeline.\n * Previous calls to `resize` in the same pipeline will be ignored.\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.outside,\n *     withoutReduction: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // of at least 200 pixels wide and 200 pixels high while maintaining aspect ratio\n *     // and no smaller than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {number} [width] - How many pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {number} [height] - How many pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {number} [options.width] - An alternative means of specifying `width`. If both are present this takes priority.\n * @param {number} [options.height] - An alternative means of specifying `height`. If both are present this takes priority.\n * @param {String} [options.fit='cover'] - How the image should be resized/cropped to fit the target dimension(s), one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - A position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when `fit` is `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - The kernel to use for image reduction and the inferred interpolator to use for upsampling. Use the `fastShrinkOnLoad` option to control kernel vs shrink-on-load.\n * @param {Boolean} [options.withoutEnlargement=false] - Do not scale up if the width *or* height are already less than the target dimensions, equivalent to GraphicsMagick's `>` geometry option. This may result in output dimensions smaller than the target dimensions.\n * @param {Boolean} [options.withoutReduction=false] - Do not scale down if the width *or* height are already greater than the target dimensions, equivalent to GraphicsMagick's `<` geometry option. This may still result in a crop to reach the target dimensions.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - Take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern or round-down of an auto-scaled dimension.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction resize (widthOrOptions, height, options) {\n  if (isResizeExpected(this.options)) {\n    this.options.debuglog('ignoring previous resize options');\n  }\n  if (this.options.widthPost !== -1) {\n    this.options.debuglog('operation order will be: extract, resize, extract');\n  }\n  if (is.defined(widthOrOptions)) {\n    if (is.object(widthOrOptions) && !is.defined(options)) {\n      options = widthOrOptions;\n    } else if (is.integer(widthOrOptions) && widthOrOptions > 0) {\n      this.options.width = widthOrOptions;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', widthOrOptions);\n    }\n  } else {\n    this.options.width = -1;\n  }\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    }\n    // Height\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    }\n    // Fit\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    }\n    // Position\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position)\n        ? options.position\n        : strategy[options.position] || position[options.position] || gravity[options.position];\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    }\n    // Background\n    this._setBackgroundColourOption('resizeBackground', options.background);\n    // Kernel\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    }\n    // Without enlargement\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    }\n    // Without reduction\n    if (is.defined(options.withoutReduction)) {\n      this._setBooleanOption('withoutReduction', options.withoutReduction);\n    }\n    // Shrink on load\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n  if (isRotationExpected(this.options) && isResizeExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Extend / pad / extrude one or more edges of the image with either\n * the provided background colour or pixels derived from the image.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n* @example\n * // Add a row of 10 red pixels to the bottom\n * sharp(input)\n *   .extend({\n *     bottom: 10,\n *     background: 'red'\n *   })\n *   ...\n *\n * @example\n * // Extrude image by 8 pixels to the right, mirroring existing right hand edge\n * sharp(input)\n *   .extend({\n *     right: 8,\n *     background: 'mirror'\n *   })\n *   ...\n *\n * @param {(number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {number} [extend.top=0]\n * @param {number} [extend.left=0]\n * @param {number} [extend.bottom=0]\n * @param {number} [extend.right=0]\n * @param {String} [extend.extendWith='background'] - populate new pixels using this method, one of: background, copy, repeat, mirror.\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\nfunction extend (extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (is.object(extend)) {\n    if (is.defined(extend.top)) {\n      if (is.integer(extend.top) && extend.top >= 0) {\n        this.options.extendTop = extend.top;\n      } else {\n        throw is.invalidParameterError('top', 'positive integer', extend.top);\n      }\n    }\n    if (is.defined(extend.bottom)) {\n      if (is.integer(extend.bottom) && extend.bottom >= 0) {\n        this.options.extendBottom = extend.bottom;\n      } else {\n        throw is.invalidParameterError('bottom', 'positive integer', extend.bottom);\n      }\n    }\n    if (is.defined(extend.left)) {\n      if (is.integer(extend.left) && extend.left >= 0) {\n        this.options.extendLeft = extend.left;\n      } else {\n        throw is.invalidParameterError('left', 'positive integer', extend.left);\n      }\n    }\n    if (is.defined(extend.right)) {\n      if (is.integer(extend.right) && extend.right >= 0) {\n        this.options.extendRight = extend.right;\n      } else {\n        throw is.invalidParameterError('right', 'positive integer', extend.right);\n      }\n    }\n    this._setBackgroundColourOption('extendBackground', extend.background);\n    if (is.defined(extend.extendWith)) {\n      if (is.string(extendWith[extend.extendWith])) {\n        this.options.extendWith = extendWith[extend.extendWith];\n      } else {\n        throw is.invalidParameterError('extendWith', 'one of: background, copy, repeat, mirror', extend.extendWith);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n  return this;\n}\n\n/**\n * Extract/crop a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` twice and `resize` once for extract-then-resize-then-extract in a fixed operation order.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {number} options.left - zero-indexed offset from left edge\n * @param {number} options.top - zero-indexed offset from top edge\n * @param {number} options.width - width of region to extract\n * @param {number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction extract (options) {\n  const suffix = isResizeExpected(this.options) || this.options.widthPre !== -1 ? 'Post' : 'Pre';\n  if (this.options[`width${suffix}`] !== -1) {\n    this.options.debuglog('ignoring previous extract options');\n  }\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this);\n  // Ensure existing rotation occurs before pre-resize extraction\n  if (isRotationExpected(this.options) && !isResizeExpected(this.options)) {\n    if (this.options.widthPre === -1 || this.options.widthPost === -1) {\n      this.options.rotateBeforePreExtract = true;\n    }\n  }\n  return this;\n}\n\n/**\n * Trim pixels from all edges that contain values similar to the given background colour, which defaults to that of the top-left pixel.\n *\n * Images with an alpha channel will use the combined bounding box of alpha and non-alpha channels.\n *\n * If the result of this operation would trim an image to nothing then no change is made.\n *\n * The `info` response Object will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @example\n * // Trim pixels with a colour similar to that of the top-left pixel.\n * await sharp(input)\n *   .trim()\n *   .toFile(output);\n *\n * @example\n * // Trim pixels with the exact same colour as that of the top-left pixel.\n * await sharp(input)\n *   .trim({\n *     threshold: 0\n *   })\n *   .toFile(output);\n *\n * @example\n * // Assume input is line art and trim only pixels with a similar colour to red.\n * const output = await sharp(input)\n *   .trim({\n *     background: \"#FF0000\",\n *     lineArt: true\n *   })\n *   .toBuffer();\n *\n * @example\n * // Trim all \"yellow-ish\" pixels, being more lenient with the higher threshold.\n * const output = await sharp(input)\n *   .trim({\n *     background: \"yellow\",\n *     threshold: 42,\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {string|Object} [options.background='top-left pixel'] - Background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to that of the top-left pixel.\n * @param {number} [options.threshold=10] - Allowed difference from the above colour, a positive number.\n * @param {boolean} [options.lineArt=false] - Does the input more closely resemble line art (e.g. vector) rather than being photographic?\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction trim (options) {\n  this.options.trimThreshold = 10;\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      if (is.defined(options.background)) {\n        this._setBackgroundColourOption('trimBackground', options.background);\n      }\n      if (is.defined(options.threshold)) {\n        if (is.number(options.threshold) && options.threshold >= 0) {\n          this.options.trimThreshold = options.threshold;\n        } else {\n          throw is.invalidParameterError('threshold', 'positive number', options.threshold);\n        }\n      }\n      if (is.defined(options.lineArt)) {\n        this._setBooleanOption('trimLineArt', options.lineArt);\n      }\n    } else {\n      throw is.invalidParameterError('trim', 'object', options);\n    }\n  }\n  if (isRotationExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  });\n  // Class attributes\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}